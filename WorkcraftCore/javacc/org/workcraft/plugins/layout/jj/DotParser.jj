/**
 * JavaCC file
 */

options {
  JDK_VERSION = "1.8";
  LOOKAHEAD = 1;
  STATIC = false;
}

PARSER_BEGIN(DotParser)
package org.workcraft.plugins.layout.jj;

import org.workcraft.util.Pair;

import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class DotParser {

    public class Attributes extends HashMap<String, String> {};

    private Map<String, Attributes> nodeAttributesMap = new HashMap<String, Attributes>();
    private Map<Pair<String, String>, Attributes> edgeAttributesMap = new HashMap<Pair<String, String>, Attributes>();

    public DotParser(String text) {
        this(new StringReader(text.replace("\\\n", "")));
    }

    public Set<String> getNodes() {
        return nodeAttributesMap.keySet();
    }

    public Set<Pair<String, String>> getEdges() {
        return edgeAttributesMap.keySet();
    }

    public Attributes getNodeAttributes(String node) {
        return nodeAttributesMap.get(node);
    }

    public Attributes getEdgeAttributes(Pair<String, String> edge) {
        return edgeAttributesMap.get(edge);
    }

}
PARSER_END(DotParser)

SKIP :
{
    " "
|
    "\t"
|
    "\r"
|
    "\n"
|
    <"#" (~["\r","\n"])* (["\r", "\n"])*>
|
    <"//" (~["\r","\n"])* (["\r", "\n"])*>
}

TOKEN :
{
    "strict" | "graph" | "digraph" | "subgraph" | "node" | "edge"
|
    <NAME: (["_","A"-"Z","a"-"z","0"-"9"])+>
|
    <QUOTED: "\""(~["\""] | "\\\"")*"\"">
|
    <NUMERAL: (["-"])?("."(["0"-"9"])+ | (["0"-"9"])+ ("."(["0"-"9"])*)?)>
}

String id() :
{
  Token t;
}
{
    t= <QUOTED>
    {
        return t.image.substring(1, t.image.length()-1);
    }
    |
    (
        t = <NAME>
    |
        t = <NUMERAL>
    )
    {
        return t.image;
    }
}

void parseGraph() :
{
}
{
    ["strict"] ("graph" | "digraph") id() "{"
    (
        parseStatement()
    )*
    "}"
}

void parseStatement() :
{
    Token name;
    Attributes attributes;
    String i, j;
}
{
    (
        parseCommonAttributes()
    |
        "subgraph" id() "{"
        (
            parseStatement()
        )*
        "}"
    |
        i = id()
        (
            attributes = parseAttributes() ";"
            {
                nodeAttributesMap.put(i, attributes);
            }
        |
            "->" j = id() attributes = parseAttributes() ";"
            {
                edgeAttributesMap.put(Pair.of(i, j), attributes);
            }
        )
    )
}

void parseCommonAttributes() :
{
}
{
    ("graph"|"node"|"edge") parseAttributes() ";"
}

Attributes parseAttributes() :
{
      Attributes attributes = new Attributes();
}
{
    "["
    (
        parseAttribute(attributes)
    )*
    "]"
    {
      return attributes;
    }
}

void parseAttribute(Attributes attributes):
{
    String name;
    String value = null;
}
{
    name = id()
    ["="
        value = id()
    ]
    [","]
    {
        attributes.put(name, value);
    }
}
