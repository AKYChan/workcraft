/* Generated By:JavaCC: Do not edit this line. CpogExpressionParser.java */
package org.workcraft.plugins.cpog.expressions.javacc;

import java.util.Collection;
import java.util.HashMap;
import java.io.Reader;
import java.io.StringReader;

import org.workcraft.plugins.cpog.expressions.*;
import org.workcraft.util.Func;

public class CpogExpressionParser implements CpogExpressionParserConstants {
  public CpogExpressionParser(Reader reader, Func<String, ? extends CpogFormula> vars)
  {
    this (reader);
    this.vars = vars;
  }

  CpogWorker worker = new CleverCpogWorker();
  Func<String, ? extends CpogFormula> vars;

  CpogFormula var(String name) throws ParseException
  {
        CpogFormula result = vars.eval(name);
    if (result == null)
    throw new ParseException("Undefined variable: '" + name + "'");
    return result;
  }

  CpogFormula overlay(CpogFormula a, CpogFormula b)
  {
    return worker.overlay(a, b);
  }

  CpogFormula sequence(CpogFormula a, CpogFormula b)
  {
    return worker.sequence(a, b);
  }

  public static CpogFormula parse(String text, Func<String, ? extends CpogFormula> vars) throws ParseException
  {
    return new CpogExpressionParser(new StringReader(text), vars).formula();
  }

  public static CpogFormula parse(String text, Collection <? extends CpogFormulaVariable> variables) throws ParseException
  {
    final HashMap<String, CpogFormulaVariable> map = new HashMap<String, CpogFormulaVariable>();
    for(CpogFormulaVariable var : variables)
          map.put(var.getLabel(), var);
    return parse(text, new Func<String, CpogFormulaVariable>()
    {
      public CpogFormulaVariable eval(String label)
      {
        return map.get(label);
      }
    });
  }

  public static void main(String [] args) throws Exception
  {
    System.out.println(CpogFormulaToString.toString(new CpogExpressionParser(System.in).formula()));
  }

  final public CpogFormula formula() throws ParseException {
        CpogFormula result;
        CpogFormula op;
    result = overlayOp1();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OVERLAY:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(OVERLAY);
      op = overlayOp1();
    result = overlay(result, op);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public CpogFormula overlayOp1() throws ParseException {
        CpogFormula result;
        CpogFormula op;
    result = overlayOp();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case 8:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      op = overlayOp();
    result = overlay(result, op);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public CpogFormula overlayOp() throws ParseException {
        CpogFormula result;
        CpogFormula op;
    result = literal();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEQUENCE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(SEQUENCE);
      op = literal();
    result = sequence(result, op);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public CpogFormula literal() throws ParseException {
  Token t;
  CpogFormula result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
          result = var(t.image);
      break;
    case 8:
      jj_consume_token(8);
      result = formula();
      jj_consume_token(9);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public CpogExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x180,0x40,0x180,};
   }

  /** Constructor with InputStream. */
  public CpogExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CpogExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CpogExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CpogExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CpogExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CpogExpressionParser(CpogExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CpogExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[10];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 10; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
