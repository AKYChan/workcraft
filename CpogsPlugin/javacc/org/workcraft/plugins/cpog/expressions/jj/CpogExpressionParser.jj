/**
 * JavaCC file
*/
 
options {
  JDK_VERSION = "1.7";
  STATIC = false;
  UNICODE_INPUT = true;
}
PARSER_BEGIN(CpogExpressionParser)
package org.workcraft.plugins.cpog.expressions.jj;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.io.Reader;
import java.io.StringReader;

import org.workcraft.plugins.cpog.expressions.*;
import org.workcraft.util.Func;
import org.workcraft.plugins.cpog.optimisation.BooleanFormula;
import org.workcraft.plugins.cpog.optimisation.BooleanVariable;
import org.workcraft.plugins.cpog.optimisation.jj.BooleanParser;
import org.workcraft.plugins.cpog.optimisation.booleanvisitors.FormulaToString;
import org.workcraft.plugins.cpog.optimisation.expressions.BooleanVisitor;
import org.workcraft.plugins.cpog.optimisation.FreeVariable;

public class CpogExpressionParser {
  public CpogExpressionParser(Reader reader, GraphFunc<String, ? extends CpogFormula> vars)
  {
    this (reader);
    this.vars = vars;
  }

  public CpogExpressionParser(Reader reader, GraphFunc<String, ? extends CpogFormula> vars, String graphName)
  {
    this (reader);
    this.vars = vars;
    this.graphName = graphName;
    nameSet = true;
  }

  public CpogExpressionParser(Reader reader, GraphFunc<String, ? extends CpogFormula> vars, String graphName, String bool)
  {
    this (reader);
    this.vars = vars;
    this.graphName = graphName;
    nameSet = true;
    this.globalBool = bool;
  } 
  
  CpogWorker worker = new CleverCpogWorker();
  GraphFunc<String, ? extends CpogFormula> vars;
  String graphName, globalBool = "";
  boolean nameSet = false;
  final HashMap<String, FreeVariable> map = new HashMap<String, FreeVariable>();	

  
  CpogFormula var(String name) throws ParseException
  {
	CpogFormula result = vars.eval(name);
    if (result == null)
    throw new ParseException("Undefined variable: '" + name + "'");
    return result;
  }

  CpogFormula var(String name, String boolExpression) throws ParseException
  {
	CpogFormula result = vars.eval(name, boolExpression);
    if (result == null)
    throw new ParseException("Undefined variable: '" + name + "'");
    return result;
  } 
  CpogFormula overlay(CpogFormula a, CpogFormula b)
  {
    return worker.overlay(a, b);
  }
  
  CpogFormula sequence(CpogFormula a, CpogFormula b)
  {
    CpogFormula result = worker.sequence(a, b);
	vars.setSequenceCondition(result, globalBool);
    return result;
  }
  
  public static CpogFormula parse(String text, GraphFunc<String, ? extends CpogFormula> vars) throws ParseException
  {
    return new CpogExpressionParser(new StringReader(text), vars).formula();
  }

    public static CpogFormula parse(String text, Collection <? extends CpogFormulaVariable> variables) throws ParseException
  {
    final HashMap<String, CpogFormulaVariable> map = new HashMap<String, CpogFormulaVariable>();
    for(CpogFormulaVariable var : variables)
          map.put(var.getLabel(), var);
    return parse(text, new GraphFunc<String, CpogFormulaVariable>()
    {
      private String graphName;
      
      public CpogFormulaVariable eval(String label)
      {
        return map.get(label);
      }

      public GraphFunc<String, CpogFormulaVariable> removeGraphName(String graphName)
      {
                if (map.containsKey(graphName))
                {
                  map.remove(graphName);
                }
                return this;
      }

        public CpogFormula eval(String label, String boolExpression)
                        throws ParseException {
                return map.get(label);
        }

		@Override
				public void setSequenceCondition(CpogFormula formula, String boolForm) {
					// TODO Auto-generated method stub
					
				}


    });
  }

  public static void main(String [] args) throws ParseException
  {
  }

}


PARSER_END(CpogExpressionParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}
TOKEN : /* OPERATORS */
{
  	< OVERLAY: "+" >
|  	< SEQUENCE: "->" | "^" >
|   < BOOLOPEN: "[" >
|   < BOOLCLOSE: "]" >
| 	< BRACKOPEN: "(" >
|   < BRACKCLOSE: ")" >
}
TOKEN :
{
    < VARIABLE:
    ("{")*["A"-"Z","a"-"z","_", "!","0"-"9"](["-","=","!","'","/","\\","\u21d2","|","+","\u2228","^","\u2295","&","*","\u2227","\u2022","'","_","A"-"Z","a"-"z","0"-"9"])*("}")*(["+", "-", "~"])?>
}

CpogFormula formula() :
{
  CpogFormula op;
  CpogFormula result = null;
  String bool;
}
{
  result = overlayOp1() ( < OVERLAY > op = overlayOp1()
  {
    result = overlay(result, op);
  } )*
  {
    return result;}
}

CpogFormula overlayOp1() :
{
  	CpogFormula result;
  	CpogFormula op;
}
{
  result = overlayOp() ( op = overlayOp()
  {
    result = overlay(result, op);
  } )*
  
  { return result; }
}

CpogFormula overlayOp() :
{
  	CpogFormula result;
  	CpogFormula op;
}
{
  result = literal() ( < SEQUENCE > op = literal()
  {
    result = sequence(result, op);
} ) *
  {
    return result; }
} 

CpogFormula literal() : 
{
  Token t = null;
  String bool, str;
  CpogFormula result = null;
}
{
   (
     t = < VARIABLE > 
	{
	  if (globalBool != "")
	  {
		result = var(t.image, globalBool);
	  }  else
	  {
	  	result = var(t.image);
	  }
	}
	| t = < BOOLOPEN >
	{
	  bool = stringLiteral();
	  boolClose();
	  result = literal1(bool);
	} 
    | "(" result = formula() ")"
  )
  {
    return result; }
}

CpogFormula literal1(String bool) :
{
  Token t = null;
  CpogFormula result;
  String str = "", exp = "";
}
{
  (
    t = < VARIABLE >
    {
      if (globalBool == "")
      {
        result = var(t.image, bool);
      } else
      {
		result = var (t.image, globalBool + "&" + bool);
      }
    }
  	| t = < BRACKOPEN >
  	{
  	  while (str.compareTo(")") != 0)
  	  {
  	    if (str.compareTo("]") == 0)
  	    {
		  exp = exp.substring(0, exp.length() - 1);
  	    }
  	    exp = exp + str;
  	    str = bracketInternals();
  	  }
  	  result = new CpogExpressionParser(new StringReader(exp), vars , graphName, bool).formula();
  	}
  )
	{
  	  return result;
	}
}

String stringLiteral() :
{
  Token t = null;
  String result;
  String str = "", exp = "";
}
{
  (
    t = < VARIABLE >
    {
      result = t.image;
    }
  )
	{
  	  return result;
	}
}
 
String boolClose() :
{
  Token t = null;
  String result;
}
{
  (
    t = < BOOLCLOSE >
    {
      result = t.image;
    }
  )
	{
  	return result;
	}
}

String bracketInternals() :
{
  Token t = null;
  String result = "";
} 
{
  (
  t = < OVERLAY >
    {
	  result = "+" + " ";
	}
  | t = < SEQUENCE >
    {
	  result = t.image + " ";
	}
  | t = < BOOLOPEN >
    {
	  result = t.image;
	}
  | t = < BOOLCLOSE >
    {
      result = t.image;
    }
  | t = < BRACKCLOSE >
    {
	  result = t.image;
	}
  | t = < BRACKOPEN >
  	{
  	  String r = "";
	  result = "(";
	  while (r.compareTo(")") != 0)
	  {
		r = bracketInternals();
		result = result + r;
	  }
	  
	} 
  | t = < VARIABLE >
    {
      result = t.image + " ";
    }

  )

  {
    return result;
  }
}
