/* Generated By:JavaCC: Do not edit this line. DotGParser.java */
package org.workcraft.plugins.fst.javacc;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import org.workcraft.dom.Node;
import org.workcraft.plugins.fsm.Event;
import org.workcraft.plugins.fsm.State;
import org.workcraft.plugins.fst.Fst;
import org.workcraft.plugins.fst.Signal;
import org.workcraft.plugins.fst.Signal.Type;
import org.workcraft.plugins.fst.SignalEvent;
import org.workcraft.plugins.fst.SignalEvent.Direction;
import org.workcraft.util.Pair;
import org.workcraft.exceptions.FormatException;

public class DotGParser implements DotGParserConstants {
    private HashMap < String, Type > signals;
    private HashSet < String > dummies;
    private Fst fst;

    private void init() {
        signals = new HashMap < String, Type > ();
        dummies = new HashSet < String > ();
        fst = new Fst();
    }

    private State getOrCreateState(String name) {
        Node node = fst.getNodeByReference(name);
        if (node == null) {
            node = fst.createState(name);
        }
        if (!(node instanceof State)) {
            throw new FormatException("Node " + name + " is not a state.");
        }
        return (State) node;
    }

    private Signal getOrCreateSignal(String name) {
        Signal signal = null;
        Node node = fst.getNodeByReference(name);
        if (node == null) {
            if (signals.containsKey(name)) {
                    Type type = signals.get(name);
                signal = fst.createSignal(name, type);
            }
        } else if (node instanceof Signal) {
            signal = (Signal)node;
        } else {
                throw new FormatException("Node \u005c"" + name + "\u005c" already exists and it is not a signal.");
        }
        return signal;
    }

    private Event createEvent(State fromState, State toState, Signal signal) {
        Event event = fst.createSignalEvent(fromState, toState, signal);
        return event;
    }

    private void addSignals(List < String > list, Type type) {
        for (String name : list) {
            if (signals.containsKey(name)) {
                Type oldType = signals.get(name);
                if (!oldType.equals(type)) {
                    throw new FormatException("The " + type + " signal \u005c"" + name
                        + "\u005c" was already listed as an " + oldType + " signal.");
                }
            } else {
                signals.put(name, type);
            }
        }
    }

  final public Fst parse() throws ParseException {
        init();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINEBREAK:
      case INPUT_HEADER:
      case OUTPUT_HEADER:
      case INTERNAL_HEADER:
      case DUMMY_HEADER:
      case UNSUPPORTED_HEADER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      header();
      jj_consume_token(LINEBREAK);
    }
    graph();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MARKING:
      case UNSUPPORTED_HEADER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      footer();
      jj_consume_token(LINEBREAK);
    }
    jj_consume_token(END);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(ANY);
    }
    jj_consume_token(0);
        {if (true) return fst;}
    throw new Error("Missing return statement in function");
  }

  final public void header() throws ParseException {
    List < String > list;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINEBREAK:
      jj_consume_token(LINEBREAK);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT_HEADER:
      jj_consume_token(INPUT_HEADER);
      list = stringList();
            addSignals(list, Type.INPUT);
      break;
    case OUTPUT_HEADER:
      jj_consume_token(OUTPUT_HEADER);
      list = stringList();
            addSignals(list, Type.OUTPUT);
      break;
    case INTERNAL_HEADER:
      jj_consume_token(INTERNAL_HEADER);
      list = stringList();
            addSignals(list, Type.INTERNAL);
      break;
    case DUMMY_HEADER:
      jj_consume_token(DUMMY_HEADER);
      list = stringList();
            addSignals(list, Type.DUMMY);
      break;
    case UNSUPPORTED_HEADER:
      jj_consume_token(UNSUPPORTED_HEADER);
      jj_consume_token(REST);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public List < String > stringList() throws ParseException {
    Token t;
    List < String > list = new LinkedList < String > ();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      t = jj_consume_token(NAME);
            list.add(t.image);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void footer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MARKING:
      jj_consume_token(MARKING);
      marking();
      break;
    case UNSUPPORTED_HEADER:
      jj_consume_token(UNSUPPORTED_HEADER);
      jj_consume_token(REST);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void marking() throws ParseException {
    Token t;
    State state;
    jj_consume_token(18);
    t = jj_consume_token(NAME);
    jj_consume_token(19);
        state = getOrCreateState(t.image);
        state.setInitial(true);
  }

  final public void graph() throws ParseException {
    jj_consume_token(STATE_GRAPH);
    jj_consume_token(LINEBREAK);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      graphLine();
      jj_consume_token(LINEBREAK);
    }
  }

  final public void graphLine() throws ParseException {
    Token t;
    State fromState;
    Signal signal;
    Direction direction;
    Event event;
    State toState;
    t = jj_consume_token(NAME);
            fromState = getOrCreateState(t.image);
    label_6:
    while (true) {
      t = jj_consume_token(NAME);
                signal = getOrCreateSignal(t.image);
                direction = Direction.TOGGLE;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIRECTION:
        t = jj_consume_token(DIRECTION);
                    direction = Direction.fromString(t.image);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      t = jj_consume_token(NAME);
                toState = getOrCreateState(t.image);
            event = createEvent(fromState, toState, signal);
            if (event instanceof SignalEvent) {
                SignalEvent signalEvent = (SignalEvent)event;
                signalEvent.setDirection(direction);
            }
            fromState = toState;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
    }
  }

  /** Generated Token Manager. */
  public DotGParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x47c0,0x5000,0x10,0x40,0x4780,0x8000,0x5000,0x8000,0x10000,0x8000,};
   }

  /** Constructor with InputStream. */
  public DotGParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DotGParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DotGParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DotGParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DotGParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DotGParser(DotGParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DotGParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
