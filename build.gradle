plugins {
    id 'ca.coglinc.javacc' version '2.4.0'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'de.aaschmid.cpd' version '3.0'
}

ext {
    checkstyleVersion = '8.1' // Problems with versions above 8.1
    pmdVersion = '6.18.0'
    jacocoVersion = '0.8.4'
}

repositories {
    jcenter()
}

subprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'java'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    sourceSets {
        main.java.srcDirs = ['src', 'src-gen']
        main.resources.srcDirs = ['res']
        test.java.srcDirs = ['test-src']
        test.resources.srcDirs = ['test-res']
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:deprecation"
    }

    apply plugin: 'kotlin'

    sourceSets {
        main.kotlin.srcDirs = ['src']
        test.kotlin.srcDirs = ['test-src']
    }

    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }

    apply plugin: 'ca.coglinc.javacc'

    compileJavacc {
        inputDirectory = file('javacc')
        outputDirectory = file('src-gen')
        include '**/*.jj'
        arguments = [grammar_encoding: 'UTF-8', static: 'false']
    }

    task cleanJavacc(type: Delete) {
        delete compileJavacc.outputDirectory
    }

    configurations {
        libs
    }

    dependencies {
        libs fileTree(dir: 'libs', include: ['**/*.jar'])
        configurations.compile.extendsFrom(configurations.libs)
        testCompile 'junit:junit:4.12'
        javacc 'net.java.dev.javacc:javacc:7.0.4'
    }

    jar {
        from {
            configurations.libs.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }

    apply plugin: 'eclipse'

    eclipse {
        project {
            buildCommand 'org.jetbrains.kotlin.ui.kotlinBuilder'
            natures 'org.jetbrains.kotlin.core.kotlinNature'
        }
        classpath {
            containers 'org.jetbrains.kotlin.core.KOTLIN_CONTAINER'
        }
    }

    eclipseClasspath.dependsOn compileJavacc

    apply plugin: 'idea'

    idea.module {
        sourceDirs = [file('src'), file('javacc'), file('src-gen')]
        generatedSourceDirs = [file('src-gen')]
        resourceDirs = [file('res'), file('models')]
        testSourceDirs = [file('test-src')]
        testResourceDirs = [file('test-res')]
        excludeDirs = [file('.gradle'), file('.settings'), file('bin'), file('build'), file('gradle')]
        inheritOutputDirs = false
        outputDir = file('build')
    }

    ideaModule.dependsOn compileJavacc

    task cleanAll(dependsOn: ['clean', 'cleanEclipse', 'cleanIdea', 'cleanJavacc'])

    test {
        workingDir = "../"
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
    }

    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = checkstyleVersion
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    }

    checkstyleMain.exclude '**/jj/**'

    task checkstyle(dependsOn: tasks.withType(Checkstyle)*.name)

    apply plugin: 'pmd'

    pmd {
        toolVersion = pmdVersion
        consoleOutput = true
        incrementalAnalysis = true
        ruleSetFiles = files("${project.rootDir}/config/pmd/rules.xml")
        ruleSets = []
    }

    pmdMain.exclude '**/jj/**'

    task pmd(dependsOn: tasks.withType(Pmd)*.name)

    apply plugin: 'de.aaschmid.cpd'

    cpd {
        toolVersion = pmdVersion
        minimumTokenCount = 250
    }

    cpdCheck.exclude '**/jj/**'


    apply plugin: 'jacoco'

    jacoco {
        toolVersion = jacocoVersion
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }
}

cpdCheck {
    source = sourceSets.main.allJava
    exclude '**/jj/**'
}


apply plugin: 'jacoco'

def coverallsProjects = subprojects.findAll {
    it.name == 'AtacsPlugin' ||
    it.name == 'CircuitPlugin' ||
    it.name == 'MpsatSynthesisPlugin' ||
    it.name == 'MpsatVerificationPlugin' ||
    it.name == 'PetrifyPlugin' ||
    it.name == 'PetriPlugin' ||
    it.name == 'StgPlugin' ||
    it.name == 'WtgPlugin' ||
    it.name == 'WorkcraftCore'
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    dependsOn(coverallsProjects.test)

    sourceDirectories.from = coverallsProjects.sourceSets.main.allSource.srcDirs
    additionalSourceDirs.from = coverallsProjects.sourceSets.main.allSource.srcDirs
    classDirectories.from = coverallsProjects.sourceSets.main.output
    executionData.from = coverallsProjects.jacocoTestReport.executionData

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }

    afterEvaluate {
        classDirectories.from = classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/jj/**')
        }
    }
}

jacoco {
    toolVersion = jacocoVersion
}

coveralls {
    sourceDirs = coverallsProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    dependsOn jacocoRootReport
}

apply plugin: 'idea'

idea.module {
    excludeDirs = [file('.gradle'), file('config'), file('dist-template'), file('doc'), file('gradle')]
    outputDir = file('build')
}

def workcraftRunConfiguration = '''
    <configuration default="false" name="Workcraft" type="Application" factoryName="Application" singleton="true">
        <option name="MAIN_CLASS_NAME" value="org.workcraft.Console" />
        <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$" />
        <module name="WorkcraftRunner" />
    </configuration>
'''

idea.workspace.iws {
    withXml { workspace ->
        def runManagerNode = workspace.node.component.find { it.@name == 'RunManager' }
        def workcraftRunNode = runManagerNode.find { it.@name == 'Workcraft' }
        if (workcraftRunNode != null) runManagerNode?.remove(workcraftRunNode)
        runManagerNode?.append(new XmlParser().parseText(workcraftRunConfiguration))
    }
}

tasks.cleanIdea.doLast {
    project.delete 'workcraft.iws'
}

task cleanAll(dependsOn: 'cleanIdea')
