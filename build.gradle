buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'ca.coglinc:javacc-gradle-plugin:2.3.1'
        classpath 'de.aaschmid:gradle-cpd-plugin:1.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    }
}

repositories {
    jcenter()
}

ext {
    checkstyleVersion = '6.19'
    pmdVersion = '5.5.0'
    jacocoVersion = '0.7.7.201606060606'
}

subprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'java'
    apply plugin: 'ca.coglinc.javacc'
    apply plugin: 'jacoco'

    apply plugin: 'eclipse'

    sourceCompatibility = 1.7

    sourceSets {
        main {
            java {
                srcDir 'src'
                srcDir 'src-gen'
            }
            resources {
                srcDir 'res'
            }
        }
        test {
            java {
                srcDir 'test'
            }
            resources {
                srcDir 'test'
            }
        }
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:deprecation"
    }

    compileJavacc {
        inputDirectory = file('javacc')
        outputDirectory = file('src-gen')
        include '**/*.jj'
        arguments = [grammar_encoding: 'UTF-8', static: 'false']
    }

    task cleanJavacc(type: Delete) {
        delete 'src-gen'
    }

    task cleanAll(dependsOn: ['clean', 'cleanJavacc'])

    dependencies {
        compile fileTree(dir: '../ThirdParty', include: ['*.jar'])
        compile fileTree(dir: '../ThirdParty/batik', include: ['*.jar'])

        testCompile 'junit:junit:4.12'
    }

    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = checkstyleVersion
        configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    }
    checkstyleMain.exclude '**/jj/**'

    task checkstyle(dependsOn: tasks.withType(Checkstyle))

    apply plugin: 'pmd'

    pmd {
        toolVersion = pmdVersion
        consoleOutput = true
        ruleSetFiles = files("${project.rootDir}/config/pmd/rules.xml")
        ruleSets = []
    }
    pmdMain.exclude '**/jj/**'

    task pmd(dependsOn: tasks.withType(Pmd))

    apply plugin: 'cpd'

    cpd {
        toolVersion = pmdVersion
        minimumTokenCount = 1400
    }

    cpdCheck {
        reports {
            text.enabled = true
            xml.enabled = false
        }
        source = sourceSets.main.allJava
    }
    cpdCheck.exclude '**/jj/**'

    jacoco {
        toolVersion = jacocoVersion
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }
}

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

def coverallsProjects = subprojects.findAll {
    it.name == 'WorkcraftCore' ||
    it.name == 'PetriPlugin' ||
    it.name == 'StgPlugin'
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    dependsOn(coverallsProjects.test)

    additionalSourceDirs = files(coverallsProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(coverallsProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(coverallsProjects.sourceSets.main.output)
    executionData = files(coverallsProjects.jacocoTestReport.executionData)

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/jj/**')
        })
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

jacoco {
    toolVersion = jacocoVersion
}

coveralls {
    sourceDirs = coverallsProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    dependsOn jacocoRootReport
}
