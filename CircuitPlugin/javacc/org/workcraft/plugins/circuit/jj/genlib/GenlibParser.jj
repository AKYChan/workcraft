/**
 * JavaCC file
 */

options {
  JDK_VERSION = "1.7";
  LOOKAHEAD = 1;
  STATIC = false;
  DEBUG_PARSER = true;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(GenlibParser)
package org.workcraft.plugins.circuit.jj.genlib;

import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;

import org.workcraft.dom.Node;
import org.workcraft.util.Pair;
import org.workcraft.util.Triple;
import org.workcraft.exceptions.InvalidConnectionException;
import org.workcraft.exceptions.FormatException;
import org.workcraft.exceptions.NotFoundException;

import org.workcraft.plugins.circuit.genlib.Library;
import org.workcraft.plugins.circuit.genlib.Gate;
import org.workcraft.plugins.circuit.genlib.Function;

public class GenlibParser {
}
PARSER_END(GenlibParser)

<*> SKIP :
{
    " "
|   "\t"
|   "\r"
|   "\n"
|   <"#" (~["\r", "\n"])*>
}

TOKEN :
{
    <GATE : "GATE"> : MODULE_NAME_EXPECTED
|   <LATCH : "LATCH"> : MODULE_NAME_EXPECTED
|   <PIN : "PIN">
|   <CONSTRAINT : "CONSTRAINT">
|   <INV : "INV">
|   <NONINV : "NONINV">
|   <UNKNOWN : "UNKNOWN">
|   <SEQ : "SEQ">
|   <ANY : "ANY">
|   <ACTIVE_LOW : "ACTIVE_LOW">
|   <ACTIVE_HIGH : "ACTIVE_HIGH">
|   <RISING_EDGE : "RISING_EDGE">
|   <FALLING_EDGE : "FALLING_EDGE">
|   <CONTROL : "CONTROL">
|   <ASYNCH : "ASYNCH">
|   <PIN_NAME : ["A"-"Z", "a"-"z", "_"] (["A"-"Z", "a"-"z", "_", "0"-"9"])*>
|   <NUMERAL: (["-"])?("."(["0"-"9"])+ | (["0"-"9"])+ ("."(["0"-"9"])*)?)>
|   <FORMULA: "=" (~[";"])* ";">
}

<MODULE_NAME_EXPECTED> TOKEN :
{    <MODULE_SIMPLE_NAME : ["A"-"Z", "a"-"z", "_"] (["A"-"Z", "a"-"z", "_", "0"-"9"])*> : DEFAULT
|   <MODULE_QUOTED_NAME : "\"" (<CHAR> | <ESCAPESEQ>)* "\""> : DEFAULT
|   <#CHAR: [" ","!","#"-"[","]"-"~"]> // Printable ASCII characters excluding \ and "
|   <#ESCAPESEQ: "\\" ["\"","\\","n"]> // 2-character sequences \\, \", and \n
}

Library parseGenlib() :
{
    List<Gate> gates;
}
{
    gates = parseGates()
    {
        return new Library(gates);
    }
}

List<Gate> parseGates() :
{
    Gate gate;
    List<Gate> gates = new LinkedList<Gate>();
}
{
    (
        ( gate = parseGate() | gate = parseLatch() )
        {
            gates.add(gate);
        }
    )*
    {
        return gates;
    }
}

Gate parseGate() :
{
    String name;
    Function function;
}
{
    (
        <GATE>
        name = parseModuleName() <NUMERAL> function = parseFunction()
        (
           parsePin()
        )*
    )
    {
        return new Gate(name, function, null, false);
    }
}

Gate parseLatch() :
{
    String name;
    Function function;
    String next;
}
{
    (
        <LATCH>
        name = parseModuleName() <NUMERAL> function = parseFunction()
        (
           parsePin()
        )*
        next = parseSeq()
        [ parseControl() ]
        [ parseConstraint() ]
    )
    {
        return new Gate(name, function, next, false);
    }
}

String parseModuleName() :
{
    Token nameToken;
}
{
    (
        nameToken = <MODULE_SIMPLE_NAME>
        {
            return nameToken.image;
        }
    |   nameToken = <MODULE_QUOTED_NAME>
        {
            String s = nameToken.image;
            return s.substring(1, s.length()-1);
        }
    )
}

Function parseFunction() :
{
    Token nameToken;
    Token formulaToken;
}
{
    nameToken = <PIN_NAME> formulaToken = <FORMULA>
    {
        String formula = formulaToken.image
                .replaceAll("^=", "")    // Remove leading "=" symbol.
                .replaceAll(";$", "")    // Remove trailing ";" symbol.
                .replace("CONST1", "1")  // Replace constant 1.
                .replace("CONST0", "0"); // Replace constant 0.
        return new Function(nameToken.image, formula);
    }
}

void parsePin() :
{
}
{
    <PIN> (<PIN_NAME> | "*") [<INV> | <NONINV> | <UNKNOWN>] <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL>
}

String parseSeq() :
{
    Token nextToken = null;
}
{
    <SEQ> <PIN_NAME> (nextToken = <PIN_NAME> | <ANY>) (<ACTIVE_LOW> | <ACTIVE_HIGH> | <RISING_EDGE> | <FALLING_EDGE> | <ASYNCH>)
    {
        return ((nextToken == null) ? null : nextToken.image);
    }
}

void parseControl() :
{
}
{
    <CONTROL> <PIN_NAME> <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL>
}


void parseConstraint() :
{
}
{
    <CONSTRAINT> <PIN_NAME> <NUMERAL> <NUMERAL>
}
