/*
*
* Copyright 2008,2009 Newcastle University
*
* This file is part of Workcraft.
*
* Workcraft is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Workcraft is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Workcraft.  If not, see <http://www.gnu.org/licenses/>.
*
*/

package org.workcraft.plugins.circuit.serialisation;

import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.UUID;

import javax.swing.JOptionPane;

import org.workcraft.Framework;
import org.workcraft.dom.Model;
import org.workcraft.dom.hierarchy.NamespaceHelper;
import org.workcraft.exceptions.ArgumentException;
import org.workcraft.gui.MainWindow;
import org.workcraft.plugins.circuit.Circuit;
import org.workcraft.plugins.circuit.Contact;
import org.workcraft.plugins.circuit.FunctionComponent;
import org.workcraft.plugins.circuit.verilog.SubstitutionRule;
import org.workcraft.plugins.circuit.verilog.SubstitutionUtils;
import org.workcraft.serialisation.Format;
import org.workcraft.serialisation.ModelSerialiser;
import org.workcraft.serialisation.ReferenceProducer;
import org.workcraft.util.Hierarchy;

public class SdcSerialiser implements ModelSerialiser {

    private static final String KEYWORD_SET_DISABLE_TIMING = "set_disable_timing";
    private static final String KEYWORD_FROM = "-from";
    private static final String KEYWORD_TO = "-to";

    class ReferenceResolver implements ReferenceProducer {
        HashMap<Object, String> refMap = new HashMap<>();

        @Override
        public String getReference(Object obj) {
            return refMap.get(obj);
        }
    }

    @Override
    public ReferenceProducer serialise(Model model, OutputStream out, ReferenceProducer refs) {
        if (model instanceof Circuit) {
            MainWindow mainWindow = Framework.getInstance().getMainWindow();
            String instancePrefix = JOptionPane.showInputDialog(mainWindow, "Prefix to add to all instance names:", "");
            if (instancePrefix != null) {
                PrintWriter writer = new PrintWriter(out);
                writer.println("// SDC file generated by Workcraft -- http://workcraft.org/\n");
                writeCircuit(writer, (Circuit) model, instancePrefix);
                writer.close();
            }
            return new ReferenceResolver();
        } else {
            throw new ArgumentException("Model class not supported: " + model.getClass().getName());
        }
    }

    @Override
    public boolean isApplicableTo(Model model) {
        return model instanceof Circuit;
    }

    @Override
    public String getDescription() {
        return "Workcraft SDC serialiser";
    }

    @Override
    public String getExtension() {
        return ".sdc";
    }

    @Override
    public UUID getFormatUUID() {
        return Format.SDC;
    }

    private void writeCircuit(PrintWriter out, Circuit circuit, String instancPrefix) {
        HashMap<String, SubstitutionRule> substitutionRules = SubstitutionUtils.readSubsritutionRules();
        // Write out mapped components
        for (FunctionComponent component: Hierarchy.getDescendantsOfType(circuit.getRoot(), FunctionComponent.class)) {
            if (component.isMapped()) {
                writeInstance(out, circuit, instancPrefix, component, substitutionRules);
            }
        }
    }

    private void writeInstance(PrintWriter out, Circuit circuit, String instancePrefix, FunctionComponent component,
            HashMap<String, SubstitutionRule> substitutionRules) {

        String instanceRef = circuit.getNodeReference(component);
        String instanceFlatName = NamespaceHelper.hierarchicalToFlatName(instanceRef);
        if ((instancePrefix != null) && !instancePrefix.isEmpty()) {
            instanceFlatName = instancePrefix + instanceFlatName;
        }
        String moduleName = component.getModule();
        SubstitutionRule substitutionRule = substitutionRules.get(moduleName);
        for (Contact outputContact: component.getOutputs()) {
            String outputName = null;
            for (Contact inputContact: component.getInputs()) {
                if (inputContact.getBreakPath()) {
                    if (outputName == null) {
                        outputName = SubstitutionUtils.getContactSubstitutionName(outputContact, substitutionRule, instanceFlatName);
                    }
                    String inputName = SubstitutionUtils.getContactSubstitutionName(inputContact, substitutionRule, instanceFlatName);
                    out.println(KEYWORD_SET_DISABLE_TIMING + " " + instanceFlatName + " " +
                            KEYWORD_FROM + " " + inputName + " " + KEYWORD_TO + " " + outputName);
                }
            }
        }
    }

}
