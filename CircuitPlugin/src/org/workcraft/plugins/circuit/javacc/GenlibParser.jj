/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.7";
  LOOKAHEAD = 1;
  STATIC = false;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(GenlibParser)
package org.workcraft.plugins.circuit.javacc;

import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;

import org.workcraft.dom.Node;
import org.workcraft.util.Pair;
import org.workcraft.util.Triple;
import org.workcraft.exceptions.InvalidConnectionException;
import org.workcraft.exceptions.FormatException;
import org.workcraft.exceptions.NotFoundException;

public class GenlibParser {
        
    public class Gate {        public final String name;
        public final Function function;
        public final String seq;        public Gate(String name, Function function) {
            this.name = name;
            this.function = function;
            this.seq = null;
        }
        public Gate(String name, Function function, String seq) {
            this.name = name;
            this.function = function;
            this.seq = seq;
        }
        public boolean isSequential() {
            return (seq != null);
        }
    }
    
    public class Function {
        public final String name;
        public final String expression;
        public Function(String name, String expression) {
            this.name = name;
            this.expression = expression;
        }
    }
}
PARSER_END(GenlibParser)

SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
|   <"#" (~["\r", "\n"])*>
}

TOKEN :
{
    <GATE : "GATE">
|   <LATCH : "LATCH">
|   <PIN : "PIN">
|   <INV : "INV">
|   <NONINV : "NONINV">
|   <UNKNOWN : "UNKNOWN">
|   <SEQ : "SEQ">
|   <ANY : "ANY">
|   <ACTIVE_LOW : "ACTIVE_LOW">
|   <ACTIVE_HIGH : "ACTIVE_HIGH">
|   <RISING_EDGE : "RISING_EDGE">
|   <FALLING_EDGE : "FALLING_EDGE">
|   <CONTROL : "CONTROL">
|   <CONSTRAINT : "CONSTRAINT">
|   <ASYNCH : "ASYNCH">
|   <NAME : [ "A"-"Z", "a"-"z", "_" ] ([ "_", "A"-"Z", "a"-"z", "0"-"9" ])* >
|   <STRING : "\"" (<CHAR> | <ESCAPESEQ>)* "\"" >
|   <#CHAR: [" ","!","#"-"[","]"-"~"] > // Printable ASCII characters excluding \ and "
|   <#ESCAPESEQ: "\\" ["\"","\\","n"] > // 2-character sequences \\, \", and \n
|   <ANY_NAME : "*">
|	<NUMERAL: (["-"])?("."(["0"-"9"])+ | (["0"-"9"])+ ("."(["0"-"9"])*)?)>
|   <EXPRESSION: "=" (~[";"])* ";">
}

List<Gate> parseGenlib() :
{
    List<Gate> gates; 
}
{
    gates = parseGates()
    {
        return gates;
    }
}

List<Gate> parseGates():
{
    Gate gate;
    List<Gate> gates = new LinkedList<Gate>();}
{
    (        ( gate = parseGate() | gate = parseLatch() )
        {            gates.add(gate);
        }
    )*
    {        return gates;
    }
}
    
Gate parseGate():
{
    String name;
    Function function;
}
{
    (
        <GATE> 
        name = parseName() <NUMERAL> function = parseFunction()
        (
    	   parsePin()
        )*
    )
    {
        return new Gate(name, function);
    }
}

Gate parseLatch():
{
    String name;
    Function function;
    String next;
}
{
    (
        <LATCH> 
        name = parseName() <NUMERAL> function = parseFunction()
        (
           parsePin()
        )*
        next = parseSeq()
        [ parseControl() ]
        [ parseConstraint() ]
    )
    {
        return new Gate(name, function, next);
    }
}

String parseName():
{
    Token nameToken;
}
{
    (
        nameToken = <NAME> 
    |   nameToken = <STRING>
    )
    {
        return nameToken.image;
    }
}

Function parseFunction():
{
    Token nameToken;
    Token expressionToken;
}
{
    nameToken = <NAME> expressionToken = <EXPRESSION>
    {
        String expression = expressionToken.image.replaceAll("^=", "").replaceAll(";$", "");
        return new Function(nameToken.image, expression);
    }
}

void parsePin():
{
}
{
    <PIN> (<NAME> | "*") [<INV>|<NONINV>|<UNKNOWN>] <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL>
}

String parseSeq():
{
    Token nextToken = null;
}
{
    <SEQ> <NAME> (nextToken = <NAME> | <ANY>) (<ACTIVE_LOW> | <ACTIVE_HIGH> | <RISING_EDGE> | <FALLING_EDGE> | <ASYNCH>)
    {
        return ((nextToken == null) ? null : nextToken.image);
    } 
}

void parseControl():
{
}
{
    <CONTROL> <NAME> <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL> <NUMERAL>
}


void parseConstraint():
{
}
{
    <CONSTRAINT> <NAME> <NUMERAL> <NUMERAL> 
}

