/* Generated By:JavaCC: Do not edit this line. VerilogParser.java */
package org.workcraft.plugins.circuit.javacc;

import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;

import org.workcraft.dom.Node;
import org.workcraft.util.Pair;
import org.workcraft.util.Triple;
import org.workcraft.exceptions.InvalidConnectionException;
import org.workcraft.exceptions.FormatException;
import org.workcraft.exceptions.NotFoundException;

public class VerilogParser implements VerilogParserConstants {

    public class Module {
        public final String name;
        public final List<Port> ports;
        public final List<Instance> instances;
        public Module(String name, List<Port> ports, List<Instance> instances) {
            this.name = name;
            this.ports = ports;
            this.instances = instances;
        }
    }

    public class Port {
        public final String name;
        public final String type;
        public Port(String name, String type) {
            this.name = name;
            this.type = type;
        }
    }



    public class Instance {
        public final String name;
        public final String moduleName;
        public final List<Connection> connections;
        public Instance(String name, String moduleName, List<Connection> connections) {
            this.name = name;
            this.moduleName = moduleName;
            this.connections = connections;
        }
    }

    public class Connection {
        public final String name;
        public final String netName;
        public Connection(String name, String netName) {
            this.name = name;
            this.netName = netName;
        }
    }

  final public List<Module> parseCircuit() throws ParseException {
    List<Module> modules = new LinkedList<Module>();
    modules = parseModules();
        {if (true) return modules;}
    throw new Error("Missing return statement in function");
  }

  final public List<Module> parseModules() throws ParseException {
    Module module;
    List<Module> modules = new LinkedList<Module>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      module = parseModule();
            modules.add(module);
    }
        {if (true) return modules;}
    throw new Error("Missing return statement in function");
  }

  final public Module parseModule() throws ParseException {
    Token name;
    List<Port> ports = new LinkedList<Port>();
    List<Instance> instances = new LinkedList<Instance>();
    jj_consume_token(MODULE);
    name = jj_consume_token(NAME);
    ports = parsePorts();
    instances = parseInstances();
    jj_consume_token(ENDMODULE);
        {if (true) return new Module(name.image, ports, instances);}
    throw new Error("Missing return statement in function");
  }

  final public List<Port> parsePorts() throws ParseException {
    Port port;
    List<Port> ports = new LinkedList<Port>();
    jj_consume_token(13);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case OUTPUT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      port = parsePort();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
            ports.add(port);
    }
    jj_consume_token(14);
    jj_consume_token(18);
        {if (true) return ports;}
    throw new Error("Missing return statement in function");
  }

  final public Port parsePort() throws ParseException {
    Token name;
    Token type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      type = jj_consume_token(INPUT);
      break;
    case OUTPUT:
      type = jj_consume_token(OUTPUT);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = jj_consume_token(NAME);
        {if (true) return new Port(name.image, type.image);}
    throw new Error("Missing return statement in function");
  }

  final public List<Instance> parseInstances() throws ParseException {
    Instance instance;
    List<Instance> instances = new LinkedList<Instance>();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      instance = parseInstance();
            instances.add(instance);
    }
        {if (true) return instances;}
    throw new Error("Missing return statement in function");
  }

  final public Instance parseInstance() throws ParseException {
    Token moduleName;
    Token name;
    List<Connection> connections = new LinkedList<Connection>();
    moduleName = jj_consume_token(NAME);
    name = jj_consume_token(NAME);
    jj_consume_token(13);
    connections = parseConnections();
    jj_consume_token(14);
    jj_consume_token(18);
        {if (true) return new Instance(name.image, moduleName.image, connections);}
    throw new Error("Missing return statement in function");
  }

  final public List<Connection> parseConnections() throws ParseException {
    Connection connection;
    List<Connection> connections = new LinkedList<Connection>();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      connection = parseConnection();
            connections.add(connection);
    }
        {if (true) return connections;}
    throw new Error("Missing return statement in function");
  }

  final public Connection parseConnection() throws ParseException {
    Token portName;
    Token netName;
    jj_consume_token(19);
    portName = jj_consume_token(NAME);
    jj_consume_token(13);
    netName = jj_consume_token(NAME);
    jj_consume_token(14);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
        {if (true) return new Connection(portName.image, netName.image);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public VerilogParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x300,0x20000,0x300,0x800,0x80000,0x20000,};
   }

  /** Constructor with InputStream. */
  public VerilogParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public VerilogParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VerilogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public VerilogParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VerilogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public VerilogParser(VerilogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(VerilogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
